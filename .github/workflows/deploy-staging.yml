name: Deploy to Staging

on:
  push:
    branches: [develop]

concurrency:
  group: deploy-staging
  cancel-in-progress: false

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure (Staging)
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies
        run: npm ci

      - name: Build infrastructure
        run: |
          cd infrastructure
          npm run build

      - name: Deploy infrastructure with CDK
        run: |
          cd infrastructure
          npm run deploy:staging

      - name: Output infrastructure details
        run: |
          cd infrastructure  
          npm run cdk -- outputs --stage staging

  deploy-api:
    name: Deploy API (Staging)
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies
        run: npm ci

      - name: Build shared packages
        run: npm run build

      - name: Deploy API with Serverless
        run: |
          cd apps/api
          npm run deploy:staging
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}
          REDIS_URL: ${{ secrets.REDIS_URL_STAGING }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_STAGING }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN_STAGING }}

  deploy-web:
    name: Deploy Web Dashboard (Staging)
    runs-on: ubuntu-latest
    needs: deploy-api
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared packages
        run: npm run build

      - name: Build web dashboard
        run: |
          cd apps/web
          npm run build
        env:
          VITE_API_URL: ${{ secrets.API_URL_STAGING }}
          VITE_AWS_REGION: us-east-1
          VITE_USER_POOL_ID: ${{ secrets.USER_POOL_ID_STAGING }}
          VITE_USER_POOL_CLIENT_ID: ${{ secrets.USER_POOL_CLIENT_ID_STAGING }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          vercel-args: '--prod --env STAGE=staging'

  run-migrations:
    name: Run Database Migrations (Staging)
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: |
          cd scripts
          node migrate-database.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}

  smoke-tests:
    name: Run Smoke Tests (Staging)
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run API health check
        run: |
          curl -f ${{ secrets.API_URL_STAGING }}/health || exit 1

      - name: Run web app health check  
        run: |
          curl -f ${{ secrets.WEB_URL_STAGING }} || exit 1